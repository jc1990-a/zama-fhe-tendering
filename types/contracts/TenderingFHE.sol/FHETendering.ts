/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface FHETenderingInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "callbackDeclareWinner"
      | "createProject"
      | "declareWinner"
      | "getPlainStats"
      | "nextProjectId"
      | "placeEncryptedBid"
      | "projectBids"
      | "projects"
      | "protocolId"
      | "terminateProject"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DecryptionFulfilled"
      | "EncryptedBidPlaced"
      | "ProjectCreated"
      | "ProjectTerminated"
      | "WinnerDeclared"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "callbackDeclareWinner",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createProject",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "declareWinner",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlainStats",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nextProjectId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "placeEncryptedBid",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "projectBids",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "projects",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "terminateProject",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "callbackDeclareWinner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createProject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "declareWinner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlainStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextProjectId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "placeEncryptedBid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "projectBids",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "projects", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "protocolId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "terminateProject",
    data: BytesLike
  ): Result;
}

export namespace DecryptionFulfilledEvent {
  export type InputTuple = [requestID: BigNumberish];
  export type OutputTuple = [requestID: bigint];
  export interface OutputObject {
    requestID: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EncryptedBidPlacedEvent {
  export type InputTuple = [projectId: BigNumberish, bidder: AddressLike];
  export type OutputTuple = [projectId: bigint, bidder: string];
  export interface OutputObject {
    projectId: bigint;
    bidder: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProjectCreatedEvent {
  export type InputTuple = [
    projectId: BigNumberish,
    creator: AddressLike,
    deadline: BigNumberish
  ];
  export type OutputTuple = [
    projectId: bigint,
    creator: string,
    deadline: bigint
  ];
  export interface OutputObject {
    projectId: bigint;
    creator: string;
    deadline: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProjectTerminatedEvent {
  export type InputTuple = [projectId: BigNumberish, terminator: AddressLike];
  export type OutputTuple = [projectId: bigint, terminator: string];
  export interface OutputObject {
    projectId: bigint;
    terminator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WinnerDeclaredEvent {
  export type InputTuple = [
    projectId: BigNumberish,
    winner: AddressLike,
    lowestBidPlain: BigNumberish,
    highestBidPlain: BigNumberish,
    averageBidPlain: BigNumberish,
    numParticipants: BigNumberish
  ];
  export type OutputTuple = [
    projectId: bigint,
    winner: string,
    lowestBidPlain: bigint,
    highestBidPlain: bigint,
    averageBidPlain: bigint,
    numParticipants: bigint
  ];
  export interface OutputObject {
    projectId: bigint;
    winner: string;
    lowestBidPlain: bigint;
    highestBidPlain: bigint;
    averageBidPlain: bigint;
    numParticipants: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface FHETendering extends BaseContract {
  connect(runner?: ContractRunner | null): FHETendering;
  waitForDeployment(): Promise<this>;

  interface: FHETenderingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  callbackDeclareWinner: TypedContractMethod<
    [requestId: BigNumberish, cleartexts: BytesLike, proof: BytesLike],
    [void],
    "nonpayable"
  >;

  createProject: TypedContractMethod<
    [_title: string, _description: string, _deadline: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  declareWinner: TypedContractMethod<
    [projectId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getPlainStats: TypedContractMethod<
    [projectId: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, string] & {
        numParticipants: bigint;
        averageBid: bigint;
        highestBid: bigint;
        lowestBid: bigint;
        winnerAddr: string;
      }
    ],
    "view"
  >;

  nextProjectId: TypedContractMethod<[], [bigint], "view">;

  placeEncryptedBid: TypedContractMethod<
    [projectId: BigNumberish, encInput: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  projectBids: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [[string, string] & { bidder: string; amount: string }],
    "view"
  >;

  projects: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        string,
        string,
        bigint,
        boolean,
        boolean,
        boolean,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        string
      ] & {
        creator: string;
        title: string;
        description: string;
        deadline: bigint;
        terminated: boolean;
        decryptionPending: boolean;
        winnerDeclared: boolean;
        lowestBidEncrypted: string;
        highestBidEncrypted: string;
        sumBidsEncrypted: string;
        lowestBidPlain: bigint;
        highestBidPlain: bigint;
        averageBidPlain: bigint;
        numBids: bigint;
        winner: string;
      }
    ],
    "view"
  >;

  protocolId: TypedContractMethod<[], [bigint], "view">;

  terminateProject: TypedContractMethod<
    [projectId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "callbackDeclareWinner"
  ): TypedContractMethod<
    [requestId: BigNumberish, cleartexts: BytesLike, proof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createProject"
  ): TypedContractMethod<
    [_title: string, _description: string, _deadline: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "declareWinner"
  ): TypedContractMethod<[projectId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getPlainStats"
  ): TypedContractMethod<
    [projectId: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, string] & {
        numParticipants: bigint;
        averageBid: bigint;
        highestBid: bigint;
        lowestBid: bigint;
        winnerAddr: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "nextProjectId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "placeEncryptedBid"
  ): TypedContractMethod<
    [projectId: BigNumberish, encInput: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "projectBids"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [[string, string] & { bidder: string; amount: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "projects"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        string,
        string,
        bigint,
        boolean,
        boolean,
        boolean,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        string
      ] & {
        creator: string;
        title: string;
        description: string;
        deadline: bigint;
        terminated: boolean;
        decryptionPending: boolean;
        winnerDeclared: boolean;
        lowestBidEncrypted: string;
        highestBidEncrypted: string;
        sumBidsEncrypted: string;
        lowestBidPlain: bigint;
        highestBidPlain: bigint;
        averageBidPlain: bigint;
        numBids: bigint;
        winner: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "protocolId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "terminateProject"
  ): TypedContractMethod<[projectId: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "DecryptionFulfilled"
  ): TypedContractEvent<
    DecryptionFulfilledEvent.InputTuple,
    DecryptionFulfilledEvent.OutputTuple,
    DecryptionFulfilledEvent.OutputObject
  >;
  getEvent(
    key: "EncryptedBidPlaced"
  ): TypedContractEvent<
    EncryptedBidPlacedEvent.InputTuple,
    EncryptedBidPlacedEvent.OutputTuple,
    EncryptedBidPlacedEvent.OutputObject
  >;
  getEvent(
    key: "ProjectCreated"
  ): TypedContractEvent<
    ProjectCreatedEvent.InputTuple,
    ProjectCreatedEvent.OutputTuple,
    ProjectCreatedEvent.OutputObject
  >;
  getEvent(
    key: "ProjectTerminated"
  ): TypedContractEvent<
    ProjectTerminatedEvent.InputTuple,
    ProjectTerminatedEvent.OutputTuple,
    ProjectTerminatedEvent.OutputObject
  >;
  getEvent(
    key: "WinnerDeclared"
  ): TypedContractEvent<
    WinnerDeclaredEvent.InputTuple,
    WinnerDeclaredEvent.OutputTuple,
    WinnerDeclaredEvent.OutputObject
  >;

  filters: {
    "DecryptionFulfilled(uint256)": TypedContractEvent<
      DecryptionFulfilledEvent.InputTuple,
      DecryptionFulfilledEvent.OutputTuple,
      DecryptionFulfilledEvent.OutputObject
    >;
    DecryptionFulfilled: TypedContractEvent<
      DecryptionFulfilledEvent.InputTuple,
      DecryptionFulfilledEvent.OutputTuple,
      DecryptionFulfilledEvent.OutputObject
    >;

    "EncryptedBidPlaced(uint256,address)": TypedContractEvent<
      EncryptedBidPlacedEvent.InputTuple,
      EncryptedBidPlacedEvent.OutputTuple,
      EncryptedBidPlacedEvent.OutputObject
    >;
    EncryptedBidPlaced: TypedContractEvent<
      EncryptedBidPlacedEvent.InputTuple,
      EncryptedBidPlacedEvent.OutputTuple,
      EncryptedBidPlacedEvent.OutputObject
    >;

    "ProjectCreated(uint256,address,uint256)": TypedContractEvent<
      ProjectCreatedEvent.InputTuple,
      ProjectCreatedEvent.OutputTuple,
      ProjectCreatedEvent.OutputObject
    >;
    ProjectCreated: TypedContractEvent<
      ProjectCreatedEvent.InputTuple,
      ProjectCreatedEvent.OutputTuple,
      ProjectCreatedEvent.OutputObject
    >;

    "ProjectTerminated(uint256,address)": TypedContractEvent<
      ProjectTerminatedEvent.InputTuple,
      ProjectTerminatedEvent.OutputTuple,
      ProjectTerminatedEvent.OutputObject
    >;
    ProjectTerminated: TypedContractEvent<
      ProjectTerminatedEvent.InputTuple,
      ProjectTerminatedEvent.OutputTuple,
      ProjectTerminatedEvent.OutputObject
    >;

    "WinnerDeclared(uint256,address,uint32,uint32,uint32,uint256)": TypedContractEvent<
      WinnerDeclaredEvent.InputTuple,
      WinnerDeclaredEvent.OutputTuple,
      WinnerDeclaredEvent.OutputObject
    >;
    WinnerDeclared: TypedContractEvent<
      WinnerDeclaredEvent.InputTuple,
      WinnerDeclaredEvent.OutputTuple,
      WinnerDeclaredEvent.OutputObject
    >;
  };
}
